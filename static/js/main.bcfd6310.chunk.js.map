{"version":3,"sources":["components/Error.js","components/Question.js","components/Form.js","components/Payment.js","components/List.js","components/BudgetControl.js","helper.js","components/AppContainer.js","App.js","serviceWorker.js","index.js"],"names":["Error","message","className","Question","setBudget","setRemaining","setShowquestion","useState","amount","setAmount","error","setError","onSubmit","e","preventDefault","isNaN","type","placeholder","onChange","parseInt","target","value","Form","setPayment","setCreatePayment","name","setName","expense","setExpense","trim","expenses","id","shortid","generate","console","log","Payment","payment","List","payments","map","key","BudgetControl","budgethelper","remaininghelper","budget","remaining","AppContainer","showquestion","setPayments","createPayment","useEffect","paymentRest","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bcfd6310.chunk.js","sourcesContent":["import React from 'react'\nimport '../index.css';\n\nconst Error = ({ message }) => {\n  return ( \n    <p className='alert alert-danger error'>{message}</p>\n   );\n}\n \nexport default Error;","import React, { Fragment, useState } from 'react';\nimport Error from './Error';\n\nconst Question = ({ setBudget, setRemaining, setShowquestion }) => {\n   // Definir state\n   const [ amount, setAmount ] = useState(0);\n   const [ error, setError ] = useState(false);\n\n   // Función que lee el presupuesto\n   const defineAmount = (e) => {\n     setAmount( parseInt(e.target.value, 10) )     \n   }\n\n   // Submit para definir el presupuesto\n   const addAmount = (e) => {\n     e.preventDefault();\n\n     //Validar\n     if(amount < 1 || isNaN(amount)){\n       setError(true)\n       return;\n     }\n     //Que sucede una vez pasada la validación \n     setError(false)\n     setBudget(amount)\n     setRemaining(amount)\n     setShowquestion(false)\n\n   }\n\n  return ( \n    <Fragment>\n      <h2>Coloca tu presupuesto</h2>\n      {error ? <Error message='El Presupuesto es Incorrecto' /> : null}\n      <form\n        onSubmit={addAmount}\n      >\n        <input\n          type='number'\n          className='u-full-width'\n          placeholder='Coloca tu presupuesto'\n          onChange={defineAmount}\n        />\n        <input\n          type='submit'\n          className='button-primary u-full-width' \n          value='Definir Presupuesto'\n        />\n      </form>\n    </Fragment>\n   );\n}\n \nexport default Question;","import React, { useState } from 'react';\nimport Error from './Error';\nimport shortid from 'shortid';\n\nconst Form = ({ setPayment, setCreatePayment }) => {\n  const [ name, setName ] = useState('');\n  const [ expense, setExpense ] = useState(0);\n  const [ error, setError ] = useState(false);\n\n  // Cuando el usuario agrega un gasto\n  const addExpense = (e) => {\n    e.preventDefault();\n\n    // Validar\n    if(expense < 1 || isNaN(expense) || name.trim() === ''){\n      setError(true)\n      return;\n    }\n\n    setError(false)\n\n    // Construir el gasto \n    const expenses = {\n      name,\n      expense,\n      id: shortid.generate()\n    }\n    console.log(expenses);\n    \n    // Pasar el gasto al componente principal\n    setPayment(expenses)\n    setCreatePayment(true)\n\n    // Resetear el form\n    setName('')\n    setExpense(0)\n  }\n\n  return ( \n    <form\n      onSubmit={addExpense}\n    >\n      <h2>Agrega tus gastos aquí</h2>\n      {error \n        ? \n          (\n            <Error message='Ambos campos son obligatorios o presupesto incorrecto' />\n          )\n        :\n          null\n      }\n      <div className='campo'>\n        <label>Nombre Gasto</label>\n        <input \n          type='text'\n          className='u-full-width'\n          placeholder='ej. transporte'\n          value={name}\n          onChange={(e) => {setName(e.target.value)}}\n        />\n      </div>\n      <div className='campo'>\n        <label>Cantidad Gasto</label>\n        <input \n          type='number'\n          className='u-full-width'\n          placeholder='ej. 300'\n          value={expense}\n          onChange={(e) => {setExpense(parseInt(e.target.value, 10 ))}}\n        />\n      </div>\n      <input \n        type='submit'\n        className='button-primary u-full-width'\n        value='Agregar Gasto'\n      />\n    </form>\n   );\n}\n \nexport default Form;","import React from 'react'\nimport '../index.css'\n\nconst Payment = ({ payment }) => {\n  return ( \n    <div>\n      <li className='gastos'>\n        <p>\n          {payment.name}\n          <span className='gasto'>$ {payment.expense}</span>\n        </p>\n      </li>\n    </div>\n   );\n}\n \nexport default Payment;","import React from 'react';\nimport Payment from './Payment'\nimport '../index.css'\n\nconst List = ({ payments }) => {\n  return ( \n    <div className='gastos-realizados'>\n      <h2>Listado</h2>\n      {payments.map(payment => (\n        <Payment \n          key={payment.id}\n          payment={payment}\n        /> \n      ))}\n    </div>\n   );\n}\n \nexport default List;","import React, { Fragment } from 'react';\nimport { checkBudget } from '../helper';\nimport '../index.css'\n\nconst BudgetControl = ({ budget, remaining }) => {\n  return ( \n    <Fragment>\n      <div className='alert alert-primary'>\n        Presupuesto: $ {budget}\n      </div>\n      <div className={checkBudget(budget, remaining)}>\n        Restante: $ {remaining}\n      </div>\n    </Fragment>\n   );\n}\n \nexport default BudgetControl;","export const checkBudget = ( budgethelper, remaininghelper ) => {\n  let clase;\n\n  if( (budgethelper / 4 ) > remaininghelper ){\n    clase = 'alert alert-danger';\n  } else if ( (budgethelper / 2) > remaininghelper ){\n    clase = 'alert alert-warning';\n  } else {\n     clase = 'alert alert-success'\n  }\n\n  return clase; \n}","import React, { useState, useEffect } from 'react';\nimport Question from './Question';\nimport Form from './Form';\nimport List from '../components/List'\nimport BudgetControl from './BudgetControl'\nimport '../index.css';\n\n\nfunction AppContainer() {\n  // Definir el state\n\n  const [ budget, setBudget ] = useState(0);\n  const [ remaining, setRemaining ] = useState(0);\n  const [ showquestion, setShowquestion ] = useState(true);\n  const [ payments, setPayments ] = useState([]);\n  const [ payment, setPayment ] = useState({});\n  const [ createPayment, setCreatePayment ] = useState(false);\n\n  // useEffect que actualiza el restante \n  useEffect(() => { \n    if(createPayment){\n\n      // Agrega el nuevo presupuesto\n      setPayments([\n        ...payments,\n        payment\n      ])   \n\n      // Resta del presupuesto actual\n      const paymentRest = remaining - payment.expense;\n      setRemaining(paymentRest)\n      console.log(remaining);\n      \n\n      // Resetear a false \n      setCreatePayment(false)\n    } \n  }, [payment]);\n\n\n\n  return (\n    <div className=\"container\">\n      <header>\n          <h1>Gasto Semanal</h1>\n        <div className='contenido-principal contenido'>\n        {showquestion \n          ? \n            (\n              <Question \n                setBudget={setBudget}\n                setRemaining={setRemaining}\n                setShowquestion={setShowquestion}\n              />\n            )\n          : \n            (\n              <div className='row'>\n                <div className='one-half column'>\n                  <Form\n                    setPayment={setPayment}\n                    setCreatePayment={setCreatePayment}\n                  />\n                </div>\n                <div className='one-half column'>\n                  <List \n                    payments={payments}\n                  />\n                  <BudgetControl \n                    budget={budget}\n                    remaining={remaining}\n                  />\n                </div>\n              </div>\n            )\n        }\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default AppContainer;\n","import React from 'react';\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport AppContainer from './components/AppContainer';\nimport './index.css';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Route path='/' component={AppContainer} />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}