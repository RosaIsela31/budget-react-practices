{"version":3,"sources":["components/Error.js","components/Question.js","components/AppContainer.js","App.js","serviceWorker.js","index.js"],"names":["Error","message","className","Question","useState","amount","setAmount","error","setError","onSubmit","e","preventDefault","isNaN","type","placeholder","onChange","parseInt","target","value","AppContainer","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNASeA,EAND,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACf,OACE,uBAAGC,UAAU,4BAA4BD,IC4C9BE,EA9CE,WAAM,MAEUC,mBAAS,GAFnB,mBAEZC,EAFY,KAEJC,EAFI,OAGQF,oBAAS,GAHjB,mBAGZG,EAHY,KAGLC,EAHK,KAuBrB,OACE,kBAAC,WAAD,KACE,qDACCD,EAAQ,kBAAC,EAAD,CAAON,QAAQ,iCAAoC,KAC5D,0BACEQ,SAjBa,SAACC,GACjBA,EAAEC,iBAGCN,EAAS,GAAKO,MAAMP,GACrBG,GAAS,GAIXA,GAAS,KAUN,2BACEK,KAAK,SACLX,UAAU,eACVY,YAAY,wBACZC,SA5Bc,SAACL,GACpBJ,EAAWU,SAASN,EAAEO,OAAOC,MAAO,QA6BjC,2BACEL,KAAK,SACLX,UAAU,8BACVgB,MAAM,2BCvBDC,MAdf,WAEE,OACE,yBAAKjB,UAAU,aACb,gCACI,6CACF,yBAAKA,UAAU,iCACb,kBAAC,EAAD,UCCKkB,MARf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWH,MCIbI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1c0c5303.chunk.js","sourcesContent":["import React from 'react'\nimport '../index.css';\n\nconst Error = ({ message }) => {\n  return ( \n    <p className='alert alert-danger error'>{message}</p>\n   );\n}\n \nexport default Error;","import React, { Fragment, useState } from 'react';\nimport Error from './Error';\n\nconst Question = () => {\n   // Definir state\n   const [ amount, setAmount ] = useState(0);\n   const [ error, setError ] = useState(false);\n\n   // Función que lee el presupuesto\n   const defineAmount = (e) => {\n     setAmount( parseInt(e.target.value, 10) )     \n   }\n\n   // Submit para definir el presupuesto\n   const addAmount = (e) => {\n     e.preventDefault();\n\n     //Validar\n     if(amount < 1 || isNaN(amount)){\n       setError(true)\n       return;\n     }\n     //Que sucede una vez pasada la validación \n     setError(false)\n   }\n\n  return ( \n    <Fragment>\n      <h2>Coloca tu presupuesto</h2>\n      {error ? <Error message='El Presupuesto es Incorrecto' /> : null}\n      <form\n        onSubmit={addAmount}\n      >\n        <input\n          type='number'\n          className='u-full-width'\n          placeholder='Coloca tu presupuesto'\n          onChange={defineAmount}\n        />\n        <input\n          type='submit'\n          className='button-primary u-full-width' \n          value='Definir Presupuesto'\n        />\n      </form>\n    </Fragment>\n   );\n}\n \nexport default Question;","import React from 'react';\nimport Question from './Question';\nimport '../index.css';\n\n\nfunction AppContainer() {\n\n  return (\n    <div className=\"container\">\n      <header>\n          <h1>Gasto Semanal</h1>\n        <div className='contenido-principal contenido'>\n          <Question />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default AppContainer;\n","import React from 'react';\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport AppContainer from './components/AppContainer';\nimport './index.css';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Route path='/' component={AppContainer} />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}